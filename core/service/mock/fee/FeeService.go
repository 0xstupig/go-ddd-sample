// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	fee "github.com/smapig/go-ddd-sample/core/service/fee"
	mock "github.com/stretchr/testify/mock"
)

// FeeService is an autogenerated mock type for the FeeService type
type FeeService struct {
	mock.Mock
}

// FeeCalculation provides a mock function with given fields: data
func (_m *FeeService) FeeCalculation(data fee.FeeCalculationRequestDto) (fee.FeeCalculationResponseDto, error) {
	ret := _m.Called(data)

	var r0 fee.FeeCalculationResponseDto
	var r1 error
	if rf, ok := ret.Get(0).(func(fee.FeeCalculationRequestDto) (fee.FeeCalculationResponseDto, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(fee.FeeCalculationRequestDto) fee.FeeCalculationResponseDto); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(fee.FeeCalculationResponseDto)
	}

	if rf, ok := ret.Get(1).(func(fee.FeeCalculationRequestDto) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFeeService creates a new instance of FeeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeService {
	mock := &FeeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
