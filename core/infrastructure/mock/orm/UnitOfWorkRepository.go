// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// UnitOfWorkRepository is an autogenerated mock type for the UnitOfWorkRepository type
type UnitOfWorkRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: target
func (_m *UnitOfWorkRepository) Create(target interface{}) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUoW provides a mock function with given fields: target, tx
func (_m *UnitOfWorkRepository) CreateUoW(target interface{}, tx *gorm.DB) error {
	ret := _m.Called(target, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *gorm.DB) error); ok {
		r0 = rf(target, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DbContext provides a mock function with given fields:
func (_m *UnitOfWorkRepository) DbContext() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DbContextWithPreloads provides a mock function with given fields: preloads
func (_m *UnitOfWorkRepository) DbContextWithPreloads(preloads []string) *gorm.DB {
	ret := _m.Called(preloads)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func([]string) *gorm.DB); ok {
		r0 = rf(preloads)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: target
func (_m *UnitOfWorkRepository) Delete(target interface{}) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUoW provides a mock function with given fields: target, tx
func (_m *UnitOfWorkRepository) DeleteUoW(target interface{}, tx *gorm.DB) error {
	ret := _m.Called(target, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *gorm.DB) error); ok {
		r0 = rf(target, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: target, limit, offset, preloads
func (_m *UnitOfWorkRepository) GetAll(target interface{}, limit int, offset int, preloads ...string) error {
	_va := make([]interface{}, len(preloads))
	for _i := range preloads {
		_va[_i] = preloads[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, target, limit, offset)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, int, int, ...string) error); ok {
		r0 = rf(target, limit, offset, preloads...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBy provides a mock function with given fields: target, filters, limit, offset, preloads
func (_m *UnitOfWorkRepository) GetBy(target interface{}, filters map[string]interface{}, limit int, offset int, preloads ...string) (interface{}, error) {
	_va := make([]interface{}, len(preloads))
	for _i := range preloads {
		_va[_i] = preloads[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, target, filters, limit, offset)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}, int, int, ...string) (interface{}, error)); ok {
		return rf(target, filters, limit, offset, preloads...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}, int, int, ...string) interface{}); ok {
		r0 = rf(target, filters, limit, offset, preloads...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, map[string]interface{}, int, int, ...string) error); ok {
		r1 = rf(target, filters, limit, offset, preloads...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: target, filters, preloads
func (_m *UnitOfWorkRepository) GetOne(target interface{}, filters map[string]interface{}, preloads ...string) error {
	_va := make([]interface{}, len(preloads))
	for _i := range preloads {
		_va[_i] = preloads[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, target, filters)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}, ...string) error); ok {
		r0 = rf(target, filters, preloads...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleError provides a mock function with given fields: res
func (_m *UnitOfWorkRepository) HandleError(res *gorm.DB) error {
	ret := _m.Called(res)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleOneError provides a mock function with given fields: res
func (_m *UnitOfWorkRepository) HandleOneError(res *gorm.DB) error {
	ret := _m.Called(res)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: target
func (_m *UnitOfWorkRepository) Update(target interface{}) error {
	ret := _m.Called(target)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUoW provides a mock function with given fields: target, tx
func (_m *UnitOfWorkRepository) UpdateUoW(target interface{}, tx *gorm.DB) error {
	ret := _m.Called(target, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *gorm.DB) error); ok {
		r0 = rf(target, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUnitOfWorkRepository creates a new instance of UnitOfWorkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitOfWorkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitOfWorkRepository {
	mock := &UnitOfWorkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
